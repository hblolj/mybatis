<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.hblolj.dao.ScoreMapper" >
  <resultMap id="BaseResultMap" type="com.hblolj.bean.Score" >
    <constructor >
      <arg column="student_id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="course_id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="score" jdbcType="INTEGER" javaType="java.lang.Integer" />
    </constructor>
  </resultMap>

  <!-- 嵌套结果 -->
  <resultMap id="CompleteScoreNestResult" type="com.hblolj.bean.CompleteScore">
    <result column="score" property="score" javaType="java.lang.Integer" jdbcType="INTEGER"/>
    <association property="student" javaType="com.hblolj.bean.Student">
      <id property="studentId" column="student_id"/>
      <result property="name" column="student_name"/>
      <result property="age" column="age"/>
      <result property="sex" column="sex"/>
    </association>
    <association property="course" javaType="com.hblolj.bean.Course">
      <id property="courseId" column="course_id"/>
      <result property="name" column="course_name"/>
    </association>
  </resultMap>

  <!-- 嵌套查询 -->
  <resultMap id="CompleteScoreNestSelect" type="com.hblolj.bean.CompleteScore">
    <result column="score" property="score" javaType="java.lang.Integer" jdbcType="INTEGER"/>
    <!-- 引用其他 Mapper.xml 的 select 要显示指定 namespace -->
    <association property="student" column="student_id" javaType="com.hblolj.bean.Student" select="com.hblolj.dao.StudentMapper.findSimpleStudentByStudentId"/>
    <association property="course" column="course_id" javaType="com.hblolj.bean.Course" select="com.hblolj.dao.CourseMapper.findByCourseId"/>
  </resultMap>

  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    student_id, course_id, score
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.hblolj.bean.ScoreExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from score
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="com.hblolj.bean.ScoreExample" >
    delete from score
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.hblolj.bean.Score" >
    insert into score (student_id, course_id, score
      )
    values (#{studentId,jdbcType=INTEGER}, #{courseId,jdbcType=INTEGER}, #{score,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.hblolj.bean.Score" >
    insert into score
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="studentId != null" >
        student_id,
      </if>
      <if test="courseId != null" >
        course_id,
      </if>
      <if test="score != null" >
        score,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="studentId != null" >
        #{studentId,jdbcType=INTEGER},
      </if>
      <if test="courseId != null" >
        #{courseId,jdbcType=INTEGER},
      </if>
      <if test="score != null" >
        #{score,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.hblolj.bean.ScoreExample" resultType="java.lang.Integer" >
    select count(*) from score
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update score
    <set >
      <if test="record.studentId != null" >
        student_id = #{record.studentId,jdbcType=INTEGER},
      </if>
      <if test="record.courseId != null" >
        course_id = #{record.courseId,jdbcType=INTEGER},
      </if>
      <if test="record.score != null" >
        score = #{record.score,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update score
    set student_id = #{record.studentId,jdbcType=INTEGER},
      course_id = #{record.courseId,jdbcType=INTEGER},
      score = #{record.score,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>

  <select id="selectByStudentId" resultMap="BaseResultMap">
    SELECT <include refid="Base_Column_List"/> FROM score WHERE student_id = #{studentId}
  </select>

  <!-- 嵌套结果-->
  <select id="selectCompleteByStudentIdAndCourseId" resultMap="CompleteScoreNestResult">
    SELECT
      sc.score,
      st.student_id,
      st.name AS student_name,
      st.age,
      st.sex,
      c.name AS course_name,
      c.course_id
    FROM score AS sc LEFT JOIN student AS st ON sc.student_id = st.student_id LEFT JOIN course as c ON sc.course_id = c.course_id
    WHERE sc.student_id = #{studentId} AND sc.course_id = #{courseId}
  </select>

  <!-- 四条记录只能查询出三条，用 sql 在数据库中直接查询没有问题 -->
  <!-- 上面的问题是因为 resultMap 没有设置 id，默认使用的 score 作为id ，有两条记录 score 都为 67，所以去重了-->
  <!-- 一般不会以中间表为主题进行结果映射，或者可以给中间表添加主键(不推荐) -->
  <select id="selectCompleteByStudentId" resultMap="CompleteScoreNestResult">
    SELECT
      sc.score,
      st.student_id,
      st.name AS student_name,
      st.age,
      st.sex,
      c.name AS course_name,
      c.course_id
    FROM score AS sc LEFT JOIN student AS st ON sc.student_id = st.student_id LEFT JOIN course as c ON sc.course_id = c.course_id
    WHERE sc.student_id = #{studentId}
  </select>

  <!-- 嵌套查询 n+1 问题-->
  <select id="selectCompleteByNestSelect" resultMap="CompleteScoreNestSelect">
    SELECT <include refid="Base_Column_List"/> FROM score WHERE student_id = #{studentId}
  </select>
</mapper>